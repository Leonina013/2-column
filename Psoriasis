

# Loading required libraries
library(limma)
library(edgeR)


# Reading in the feature count file as "counts.df"
counts.df <- read.table("raw_counts.tsv", header=TRUE, row.names="Gene ID", sep="\t", check.names = F)

# Printing the start of the counts.df object in R...
head(counts.df)

# Using the "Geneid" column to set the rownames
rownames(counts.df) <- counts.df$Gene_Name

# Removing the "Gene Name" column
counts.df$Gene_Name <- NULL

# Printing the start of the counts.df object in R...
head(counts.df)

# Reading in the design table as "design.df"
design.df <- read.csv("experimental_design.csv", fileEncoding="UTF-8-BOM")

# Printing the start of the design.df object in R...
print(design.df)

# Subsetting gene counts according to experimental condition
counts_normal.df  <- counts.df[,c
counts_psoriasis.df <- counts.df[,c

# Printing the structure of the gene counts set and subsets
str(counts.df)

# Defining function "RSD.test()"
RSD.test <- function(dataframe){
  # This function tests whether the relative standard deviation (RSD) is less
  # than or equal to one for each row in a data frame.
  # It adds the result to a new variable in the data frame called "RSD.test".
  # For a given row, if data.frame$RSD.test is TRUE, that row has an RSD less
  # than or equal to one, i.e. RSD <= 1.
  # If data.frame$RSD.test is FALSE, that row has an RSD outside of this range.
  RSD_tests = dataframe[,1]
  for (row_index in 1:nrow(dataframe)){
    row = as.numeric(dataframe[row_index,])
    RSD = sd(row) / mean(row)
    RSD_tests[row_index] = RSD <= 1 || is.na(RSD)
  }
  dataframe$RSD.test <- as.factor(RSD_tests)
  levels(dataframe$RSD.test) <- c(FALSE, TRUE)
  return(dataframe)
}

# Applying RSD.test() to gene count subsets
counts_normal.df <- RSD.test(counts_normal.df)
counts_psoriasis.df <- RSD.test(counts_psoriasis.df)


# Creating list of genes which failed RSD test
RSD_failed_genes <- rownames(counts_normal.df[
  which(counts_normal.df$RSD.test == FALSE),])
RSD_failed_genes <- append(RSD_failed_genes, rownames(counts_psoriasis.df[
  which(counts_psoriasis.df$RSD.test == FALSE),]))
RSD_failed_genes <- unique(RSD_failed_genes)
length(RSD_failed_genes)

# Filtering gene counts
filtered_counts.df <- counts.df[
  which(!rownames(counts.df) %in% RSD_failed_genes),]

# Printing the structure of the filtered gene counts
str(filtered_counts.df)

# Checking that gene counts were correctly filtered
nrow(counts.df) - length(RSD_failed_genes) == nrow(filtered_counts.df)


# Creating a DGEList object using the filtered gene counts
counts.DGEList <- DGEList(counts = filtered_counts.df,
                          genes = rownames(filtered_counts.df))

# Printing the design table
print(design.df)

# Confirming samples are in the same order in the gene counts and design table
summary(colnames(filtered_counts.df) == design.df$run)

# Add grouping information to DGEList object
counts.DGEList$samples$group <- as.factor(design.df$condition)

# Printing counts.DGEList
counts.DGEList

# Summary of the counts.DGEList object: number of genes, number of samples
dim(counts.DGEList)

# Creating an object to filter genes with low expression
counts.keep <- filterByExpr(counts.DGEList)
summary(counts.keep)

# Filtering lowly expressed genes
counts.DGEList <- counts.DGEList[counts.keep, , keep.lib.sizes = FALSE]
dim(counts.DGEList)

# Confirming that the number of genes in counts.DGEList is the same as the
# number of TRUE values in counts.keep
length(counts.keep[counts.keep == TRUE]) == dim(counts.DGEList)[1]

# Removing counts.keep
rm(counts.keep)

# Printing the normalisation factors for the libraries
counts.DGEList$samples$norm.factors

# Calculating normalisation factors and applying them to counts.DGEList
counts.DGEList <- calcNormFactors(counts.DGEList)
counts.DGEList$samples$norm.factors

# Estimating common dispersion and tagwise dispersion
condition_ <- design.df$condition
counts.DGEList <- estimateDisp(counts.DGEList,
                               design = model.matrix(~condition_))

counts.DGEList

condition_

# Exact tests for differences between experimental conditions
std_normal.DGEExact <- exactTest(counts.DGEList, pair = c("standard",
                                                             "normal"))
std_psoriasis.DGEExact <- exactTest(counts.DGEList, pair = c("standard",
                                                        "osmotic_pressure"))


# Extracting most differentially expressed genes from exact tests
std_anaerobic.topTags <- topTags(std_anaerobic.DGEExact)
std_salt.topTags <- topTags(std_salt.DGEExact)
std_temp.topTags <- topTags(std_temp.DGEExact)
std_pH.topTags <- topTags(std_pH.DGEExact)

# Printing the most differentially expressed genes
std_anaerobic.topTags
std_salt.topTags
std_temp.topTags
std_pH.topTags

# Printing session information
sessionInfo()
